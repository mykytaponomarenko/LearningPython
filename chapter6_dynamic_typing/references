#!/usr/bin/env python

a = 5
b = a

print('a:', a, 'b:', b)                   # a and b reference to the same object

a = a + 5                                 # new object is created for a to store value.
                                          # integers are immutable (can't be changed on place) so be is not affected
print('a:', a, 'b:', b)

# On the other hand

L1 = [1,2,3]
L2 = L1

print('L1:', L1, 'L2:', L2)

L1 = 20
print('L1:', L1, 'L2:', L2)               # same login when var is reassigned as new object is created

# but

L1 = [1,2,3]
L2 = L1

print('L1:', L1, 'L2:', L2)

L1[0] = 123
print('L1:', L1, 'L2:', L2)               # both L1 and L2 reference to same object so both are 'updated'' by object element change

# make a copy

import copy
L1 = [1,2,3]
L2 = copy.copy(L1)
print('L1:', L1, 'L2:', L2)
L1[0] = 100
print('L1:', L1, 'L2:', L2)               # only L1 object is changed. L2 value is in different object

# use copy.deepcopy() to copy with all nested parts



